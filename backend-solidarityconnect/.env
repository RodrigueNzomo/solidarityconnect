# Nom de la base de données
DB_NAME=SolidarityConnect_DB
# Explication : Définit le nom de la base de données utilisée par l'application.
# Alternative : Si vous avez plusieurs environnements (développement, test, production), utilisez des noms distincts pour éviter les conflits. Par exemple :
# DB_NAME_DEV=SolidarityConnect_DB_dev
# DB_NAME_PROD=SolidarityConnect_DB_prod

# Utilisateur pour se connecter à la base de données
DB_USER=root
# Explication : Spécifie l'utilisateur utilisé pour accéder à la base de données. Ici, "root" est l'utilisateur administrateur par défaut de MySQL.
# Alternative : Pour des raisons de sécurité, créez un utilisateur spécifique avec des privilèges limités à ce dont votre application a besoin. Par exemple :
# DB_USER=app_user

# Mot de passe de l'utilisateur pour se connecter à la base de données
DB_PASSWORD=Local123!
# Explication : Définit le mot de passe pour l'utilisateur de la base de données.
# Alternative : Utilisez un mot de passe fort et unique généré automatiquement. Par exemple :
# DB_PASSWORD=$(openssl rand -base64 24)  # Génère un mot de passe aléatoire en ligne de commande.

# Hôte où la base de données est hébergée (localhost signifie que la base de données est sur la même machine)
DB_HOST=db  # Si tu utilises Docker, sinon "localhost" pour un serveur local
# Explication : Indique l'hôte où la base de données est hébergée. Lorsque Docker est utilisé, le nom du service "db" est résolu automatiquement grâce au réseau interne.
# Alternative : Si vous utilisez un serveur distant ou une base de données cloud, spécifiez son adresse IP ou son nom de domaine. Par exemple :
# DB_HOST=database.example.com

# Port utilisé pour se connecter à la base de données (par défaut MySQL utilise le port 3306)
DB_PORT=3306
# Explication : Spécifie le port utilisé pour se connecter à la base de données. Le port 3306 est le port standard pour MySQL.
# Alternative : Si vous utilisez un port personnalisé, mettez-le ici. Par exemple :
# DB_PORT=3307

# Port du serveur API Express (utilisé pour écouter les requêtes)
PORT=5000
# Explication : Définit le port sur lequel le serveur Express écoute les requêtes entrantes.
# Alternative : Si vous prévoyez d'exposer l'application via un proxy inverse comme Nginx, laissez le port configuré dynamiquement (par exemple, via `process.env.PORT`).

# Clé secrète utilisée pour signer les JWT (JSON Web Tokens) pour l'authentification des utilisateurs
JWT_SECRET=mon_secret_jwt
# Explication : Clé secrète utilisée pour signer et vérifier les tokens JWT dans votre système d'authentification.
# Alternative : Utilisez une clé plus sécurisée et unique pour chaque environnement. Par exemple :
# JWT_SECRET=$(openssl rand -base64 32)  # Génère une clé aléatoire robuste.
# Conseil : Ne stockez jamais cette clé directement dans le code ou le fichier `.env`. Utilisez plutôt un gestionnaire de secrets comme AWS Secrets Manager, HashiCorp Vault, ou Azure Key Vault.