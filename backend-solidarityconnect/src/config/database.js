const { Sequelize } = require("sequelize");
// Explication : Importe la classe Sequelize depuis le package sequelize.
// Alternative : Si vous utilisez TypeScript, envisagez d'utiliser des imports ES6 avec des types explicites.

require("dotenv").config();
// Explication : Charge les variables d'environnement depuis un fichier .env gr√¢ce √† la biblioth√®que dotenv.
// Alternative : Pour un environnement de production, pr√©f√©rez injecter directement les variables d'environnement via votre infrastructure (Docker, Kubernetes, etc.).

console.log("üîç DEBUG - V√©rification des variables d'environnement :", {
  DB_NAME: process.env.DB_NAME,
  DB_USER: process.env.DB_USER,
  DB_HOST: process.env.DB_HOST,
  DB_PORT: process.env.DB_PORT,
  DB_PASSWORD: process.env.DB_PASSWORD ? "‚úÖ Pr√©sent" : "‚ùå Manquant",
});
// Explication : Affiche un message de debug pour v√©rifier si les variables d'environnement n√©cessaires sont d√©finies.
// Alternative : Lancez une exception ou arr√™tez l'application si une variable essentielle est manquante pour √©viter des erreurs lors du d√©marrage :
// if (!process.env.DB_NAME || !process.env.DB_USER || !process.env.DB_HOST) {
//   console.error("‚ùå Variables d'environnement manquantes !");
//   process.exit(1);
// }

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: "mysql", // Sp√©cifie le type de base de donn√©es utilis√© (ici MySQL).
    pool: {
      max: 10, // Nombre maximal de connexions dans le pool.
      min: 0, // Nombre minimal de connexions dans le pool.
      acquire: 30000, // D√©lai maximum en millisecondes avant d'abandonner l'acquisition d'une connexion.
      idle: 10000, // Dur√©e maximale en millisecondes qu'une connexion peut rester inactive avant d'√™tre lib√©r√©e.
    },
    logging: process.env.NODE_ENV !== "production" ? console.log : false, // Active les logs SQL en dehors de l'environnement de production.
  }
);
// Explication : Cr√©e une nouvelle instance de Sequelize pour g√©rer la connexion √† la base de donn√©es MySQL.
// Alternative : Si vous utilisez une base de donn√©es diff√©rente, modifiez le param√®tre `dialect` en cons√©quence (par exemple, "postgres", "mariadb", etc.).
// Conseil : Pour une meilleure gestion des pools de connexions, ajustez les param√®tres selon les besoins r√©els de votre application.

(async () => {
  try {
    await sequelize.authenticate();
    console.log("‚úÖ Connexion MySQL r√©ussie !");
    // Explication : Tente de se connecter √† la base de donn√©es pour v√©rifier que les param√®tres sont corrects.
    // Alternative : Vous pouvez ajouter des tests suppl√©mentaires pour v√©rifier la connexion avant de continuer.

    await sequelize.sync({ alter: true });
    console.log("‚úÖ Base de donn√©es synchronis√©e !");
    // Explication : Synchronise les mod√®les avec la base de donn√©es. L'option `{ alter: true }` met √† jour automatiquement les tables existantes.
    // Alternative : En production, √©vitez `{ alter: true }` car cela peut entra√Æner des pertes de donn√©es ou des modifications non intentionnelles. Utilisez plut√¥t des migrations (Sequelize CLI).

  } catch (error) {
    console.error("‚ùå Erreur de connexion MySQL :", error);
    process.exit(1); // Termine l'application en cas d'erreur critique.
    // Explication : G√®re les erreurs de connexion en affichant un message d'erreur d√©taill√© et en arr√™tant l'application.
    // Alternative : Impl√©mentez une strat√©gie de reconnexion automatique si n√©cessaire.
  }
})();
// Explication : Fonction asynchrone auto-ex√©cut√©e pour initialiser la connexion √† la base de donn√©es.
// Alternative : Si vous avez plusieurs initialisations asynchrones, envisagez de regrouper ces op√©rations dans une fonction distincte.

module.exports = sequelize;
// Explication : Exporte l'instance de Sequelize pour permettre son utilisation dans d'autres modules.
// Alternative : Si vous utilisez TypeScript ou ES6, exportez explicitement avec `export default sequelize;`.