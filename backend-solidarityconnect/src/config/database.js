// Importation de Sequelize, un ORM pour g√©rer la base de donn√©es MySQL.
const { Sequelize } = require("sequelize");

// Chargement des variables d'environnement √† partir du fichier .env
require("dotenv").config();

// Affichage des variables d'environnement pour d√©boguer et v√©rifier si elles sont bien charg√©es
console.log("üîç DEBUG - Variables d'environnement charg√©es :", process.env);

// Affichage des informations de connexion MySQL pour v√©rifier que tout est bien configur√©
console.log("üîç Connexion MySQL avec :", {
  database: process.env.DB_NAME,  // Nom de la base de donn√©es
  user: process.env.DB_USER,      // Utilisateur MySQL
  password: process.env.DB_PASS,  // Mot de passe de l'utilisateur (√† v√©rifier)
  host: process.env.DB_HOST,      // H√¥te de la base de donn√©es (g√©n√©ralement 'localhost')
  port: process.env.DB_PORT       // Port MySQL (par d√©faut 3306)
});

// Cr√©ation d'une instance de Sequelize pour g√©rer la connexion √† la base de donn√©es MySQL
const sequelize = new Sequelize(
  process.env.DB_NAME,  // Nom de la base de donn√©es
  process.env.DB_USER,  // Nom d'utilisateur pour se connecter √† la base de donn√©es
  process.env.DB_PASS,  // Mot de passe de l'utilisateur
  {
    host: process.env.DB_HOST,   // H√¥te o√π la base de donn√©es est h√©berg√©e
    port: process.env.DB_PORT,   // Port utilis√© pour se connecter √† MySQL
    dialect: "mysql",            // Type de base de donn√©es utilis√© (MySQL)
    logging: console.log,        // Activation du logging des requ√™tes SQL dans la console
  }
);

// Test de la connexion √† la base de donn√©es en utilisant la m√©thode `authenticate` de Sequelize
sequelize.authenticate()
  .then(() => console.log("‚úÖ Connexion MySQL r√©ussie !"))  // Si la connexion est r√©ussie, afficher ce message
  .catch(err => console.error("‚ùå Erreur de connexion MySQL :", err));  // Si une erreur survient, afficher l'erreur

// Exportation de l'instance Sequelize pour l'utiliser ailleurs dans l'application
module.exports = sequelize;
